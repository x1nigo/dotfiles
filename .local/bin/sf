#!/usr/bin/env bash

# sf: The simple file-manager
# Created by Chris IÃ±igo <https://github.com/x1nigo>

# Default variables
alt_files='ls'
hide='-u'
sel=1
reset='\e[0m'

# Setup the terminal.
setup_terminal() {
	# Clear screen and hide cursor.
	printf '\e[?25l\e[2J\e[1;r'

	# Hide user input.
	stty -echo
}

# Reset terminal.
reset_terminal()  {
	# Clear screen and show cursor.
	printf '\e[?25h\e[1J\e[1;r'

	# Show user input.
	stty echo
}

# Prints the current directory.
current_dir() {
	printf "\\n\e[0;41;30m[%d/%d] %s${reset}" "$sel" "$total" "$PWD"
	# Set the window name.
	printf '\e]2;sf: %s\e'\\ "$PWD"
}

# List the contents of your current working directory.
list_dir() {

	# List item order.
	order=1

	# Sort hidden files alternatively.
	shopt $hide dotglob && total=$($alt_files | wc -l)

	# Actually print the files.
	for i in *; do
		if [[ -d "$i" ]]; then
			prefix='\e[0;34m' && suffix='/'
		else
			prefix='\e[0m' && suffix=
		fi

		# Establish cursor position.
		[[ "$order" == "$sel" ]] && current="$i" && prefix='\e[0;44;30m'
		printf "${prefix}%s${suffix}${reset}\\n" "$i"
		order=$((order+1))
	done
}

# These depend on the filetype.
action() {
	trueloc=$(readlink -f "$current")
	file_type=$(file --mime-type -b "$trueloc")

	case $file_type in
		inode/directory)
			cd "$current"
			;;
		audio/*|video/*)
			mpv "$current"
			;;
		image/*)
			nsxiv "$current"
			;;
		*/pdf)
			zathura "$current"
			;;
		*)
			$EDITOR "$current"
			;;
	esac
}

# This is really just the delete function.
assassinate() {
	reset_terminal
	printf "${bold}%s\\n\\t%s${reset}" "$current" "Assassinate? [y/N]: "
	read ans
	[[ "$ans" == "y" ]] && rm -rf "$current"
}

# Rename your file [can also be used to move].
rename() {
	reset_terminal
	printf "%s\\n\\t%s${reset}" "$current" "Rename: "
	read ans
	[[ -z "$ans" ]] && continue
	mv "$current" "$ans"
}

# Create a new file.
create_file() {
	reset_terminal
	printf "%s${reset}" "Create File: "
	read ans
	[[ -z "$ans" ]] && continue
	touch "$ans"
}

# Create a directory
create_dir() {
	reset_terminal
	printf "%s${reset}" "Create Directory: "
	read ans
	[[ -z "$ans" ]] && continue
	mkdir -p "$ans"
}

# Don't make an action if directory is empty.
avoid() {
	[[ "$current" != "*" ]]
}

# List of keybindings
keys() {
	case "$input" in
		# Go down
		j)
			[[ "$sel" -lt "$total" ]] && sel=$((sel+1))
			;;
		# Go up
		k)
			[[ "$sel" -gt 1 ]] && sel=$((sel-1))
			;;
		# Quit
		q)
			reset_terminal && exit
			;;
		# Action
		[el])
			avoid && action && sel=1
			;;
		# Go to previous directory
		h)
			cd ../ && sel=1
			;;
		# Go home
		H)
			cd && sel=1
			;;
		# Delete a file
		d)
			avoid && assassinate && sel=$((sel-1))
			;;
		# Create a file
		n)
			create_file
			;;
		# Create a directory
		m)
			create_dir
			;;
		# Rename a file/directory
		r)
			avoid && rename
			;;
		# Go to top of list
		g)
			sel=1
			;;
		# Go to bottom of list
		G)
			sel="$total"
			;;
		# Show hidden files
		.)
			if [[ "$hide" == "-s" ]]; then
				hide='-u' && alt_files='ls'
			else
				hide='-s' && alt_files='ls -A'
			fi
			# Return cursor to the beginning.
			sel=1
			;;
	esac
}

# The main function that runs every time.
main() {
	while :; do
		setup_terminal
		list_dir
		current_dir
		read -srn 1 input
		[ -z "$input" ] && continue
		keys
	done
}

# Call the main function.
main
