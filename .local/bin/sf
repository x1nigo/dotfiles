#!/usr/bin/env bash

# sf: The simple file-manager
# Created by Chris IÃ±igo <https://github.com/x1nigo>

# TODO: Add functionality for copying/moving files.

# Default variables
alt_files='ls'
hide='-u'
loc=1
reset='\e[0m'

# Setup the terminal.
setup_terminal() {
	# Clear screen and hide cursor.
	printf '\e[?25l\e[2J\e[1;r'

	# Hide user input.
	stty -echo
}

# Reset terminal.
reset_terminal()  {
	# Clear screen and show cursor.
	printf '\e[?25h\e[2J\e[1;r'

	# Show user input.
	stty echo
}

# Prints the current directory.
current_dir() {
	printf "\\n\e[0;41;30m[%d/%d] %s${reset}" "$loc" "$total" "$PWD"
	# Set the window name.
	printf '\e]2;sf: %s\e'\\ "$PWD"
}

# List the contents of your current working directory.
list_dir() {
	# Array variables to display directories first
	local dirs
	local files

	# List item order.
	order=1

	# Sort hidden files alternatively.
	shopt $hide dotglob && total=$($alt_files | wc -l)

	# Add specific files in certain arrays
	for i in *; do
		if [[ -d "$i" ]]; then
			dirs+=("$i")
		else
			files+=("$i")
		fi
	done

	# Compile all files to be displayed (in order)
	list=("${dirs[@]}" "${files[@]}")

	# Format directories first then files
	for item in "${list[@]}"; do
		if [[ -d "$item" ]]; then
			prefix='\e[0;34m' && suffix='/'
		else
			prefix='\e[0m' && suffix=
		fi

		# Determine the area of focus
		if [[ "$order" == "$loc" ]]; then
			focus="$item"
			prefix='\e[0;44;30m'
		fi

		# Finally print the whole thing
		printf "${prefix}%s${suffix}${reset}\\n" "$item"
		order=$((order+1))
	done
}

# Depends on the filetype.
action() { [[ -d "$focus" ]] && cd "$focus" || xdg-open "$focus" >/dev/null 2>&1 ; }

# Don't make an action if directory is empty.
avoid() { [[ "$focus" != "*" ]] ; }

# This is really just the delete function.
delete() {
	reset_terminal
	printf "%s\\n\\t%s" "$focus" "Delete? [y/N]: "
	read ans
	[[ "$ans" == "y" ]] && rm -rf "$focus"
}

# Rename your file [can also be used to move].
rename() {
	reset_terminal
	printf "%s\\n\\t%s" "$focus" "Rename: "
	read ans
	[[ -z "$ans" ]] && continue
	mv "$focus" "$ans"
}

# Create a new file.
create_file() {
	reset_terminal
	printf "%s" "Create File: "
	read ans
	[[ -z "$ans" ]] && continue
	touch "$ans"
}

# Create a directory
create_dir() {
	reset_terminal
	printf "%s" "Create Directory: "
	read ans
	[[ -z "$ans" ]] && continue
	mkdir -p "$ans"
}

# Copy files
copy() {
	reset_terminal
	printf "%s\\n\\t%s" "$focus" "Copy to: "
	trueloc="$(readlink -f "$focus")"
	read ans
	[[ -z "$ans" ]] && continue
	cp -vr "$focus" "$ans"
}

# Move files
move() {
	reset_terminal
	printf "%s\\n\\t%s" "$focus" "Move to: "
	trueloc="$(readlink -f "$focus")"
	read ans
	[[ -z "$ans" ]] && continue
	mv "$focus" "$ans"
}

# List of keybindings
keys() {
	case "$input" in
		# Go down
		j)
			[[ "$loc" -lt "$total" ]] && loc=$((loc+1))
			;;
		# Go up
		k)
			[[ "$loc" -gt 1 ]] && loc=$((loc-1))
			;;
		# Quit
		q)
			reset_terminal && exit
			;;
		# Action
		[el])
			avoid && action && loc=1
			;;
		# Go to previous directory
		h)
			cd ../ && loc=1
			;;
		# Go to home directory
		'~')
			cd && loc=1
			;;
		# Delete a file
		d)
			avoid && delete
			;;
		# Create a file
		N)
			create_file
			;;
		# Create a directory
		M)
			create_dir
			;;
		# Rename a file/directory
		r)
			avoid && rename
			;;
		# Go to top of list
		g)
			loc=1
			;;
		# Go to bottom of list
		G)
			loc="$total"
			;;
		# Copy file(s)
		c)
			avoid && copy
			;;
		# Move file(s)
		m)
			avoid && move
			;;
		# Show hidden files
		.)
			if [[ "$hide" == "-s" ]]; then
				hide='-u' && alt_files='ls'
			else
				hide='-s' && alt_files='ls -A'
			fi
			# Return cursor to the beginning.
			loc=1
			;;
	esac
}

# The main function that runs every time.
main() {
	while :; do
		setup_terminal
		list_dir
		current_dir
		read -srn 1 input
		[ -z "$input" ] && continue
		keys
	done
}

# Call the main function.
main
