#!/usr/bin/env bash

# shfm - the shell file manager.
# Created by Chris IÃ±igo <https://github.com/x1nigo/> on May 26, 2024.

# Usage:
# 	Letters/symbols are used to navigate.
# 	Numbers are used to interact with files directly [based on their order].

# TODO: Create functionality for copying/moving files.

# Variables
hidden="ls -A"
visible="ls"

# Colors
BLACK='\e[1;30m'
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
PURPLE='\e[1;35m'
CYAN='\e[1;36m'
WHITE='\e[1;37m'
# To reset the colors.
RESET='\e[0m'
BOLD='\e[1m'

error() {
	printf "${RED}%s${RESET}\\n" "Command not recognized." && \
		read -r enter
}

guide(){
clear
cat << EOF
shfm: The shell file manager [written in bash].

Keys:
	q 	quit
	number	interact/select
	f 	Create new file
	m 	Create new directory
	d  	Delete file
	. 	Show hidden files
	, 	Veil hidden files
	? 	Read this file

Enter anything to return.
EOF
read -r enter
}

# Get the current directory.
current_dir() {
	printf "${BLACK}%s${RESET}\\n\\n" "$(pwd)"
	# Set the window name.
	printf '\e]2;shfm: %s\e'\\ "$PWD"
}

# List files in directory.
list_dir() {
	for i in "$($visible | cat -n)"; do
		printf "%s\\n" "$i"
	done
}

list_hidden() {
	for i in "$($hidden | cat -n)"; do
		printf "%s\\n" "$i"
	done
}

# Determine the filetype of certain documents and take
# the appropriate action.
detect() {
	trueloc="$(readlink -f "$item")"
	file_type=$(file --mime-type -b "$trueloc")
	case "$file_type" in
		inode/directory) cd "$trueloc" ;;
		audio/*|video/*) mpv "$trueloc" ;;
		image/*) nsxiv "$trueloc" ;;
		*/pdf) zathura "$trueloc" ;;
		*) $EDITOR "$trueloc" ;;
	esac
}

# This is really where the keybindings are.
main_args() {
	case "$cmd" in
		[Qq]) clear && exit ;;
		h) cd ;;
		b) cd .. ;;
		d) assassinate ;;
		f) create_file ;;
		m) create_directory ;;
		.) secondary ;;
		,) main ;;
		[?]) guide ;;
		*[[:digit:]]*) ;;
		*) error ;;
	esac
}

delete_args() {
	case "$cmd" in
		[Qq]) main ;;
		f) create_file ;;
		m) create_directory ;;
		h) cd ;;
		b) cd .. ;;
		[?]) guide ;;
		*[[:digit:]]*) ;;
		*) error ;;
	esac
}

create_file_args() {
	case "$cmd" in
		[Qq]) main ;;
		d) assassinate ;;
		m) create_directory ;;
		h) cd ;;
		b) cd .. ;;
		[?]) guide ;;

	esac
}
create_directory_args() {
	case "$cmd" in
		[Qq]) main ;;
		d) assassinate ;;
		f) create_file ;;
		h) cd ;;
		b) cd .. ;;
		[?]) guide ;;

	esac
}

# The main function of this program.
main() {
	while true; do
		visible_total=$($visible | wc -l)
		clear
		current_dir
		list_dir
		printf "\\n${BOLD}%s${RESET}" "Navigate: "
		read -r cmd
		[ -z "$cmd" ] && continue
		main_args
		[[ "$cmd" =~ ^[0-9]+$ || "$cmd" =~ ^[-][0-9]+$ ]] && \
			[[ "$cmd" -gt $visible_total || "$cmd" -le 0 ]] && error && continue || item=$($visible| sed -n "$cmd p") && detect
	done
}

secondary() {
	while true; do
		hidden_total=$($hidden | wc -l)
		clear
		current_dir
		list_hidden
		printf "\\n${BOLD}%s${RESET}" "[Hidden] Navigate: "
		read -r cmd
		[ -z "$cmd" ] && continue
		main_args
		[[ "$cmd" =~ ^[0-9]+$ || "$cmd" =~ ^[-][0-9]+$ ]] && \
			[[ "$cmd" -gt $hidden_total || "$cmd" -le 0 ]] && error && continue || item=$($hidden | sed -n "$cmd p") && detect
	done
}

create_file() {
	while true; do
		visible_total=$($visible | wc -l)
		clear
		current_dir
		list_dir
		printf "\\n${CYAN}%s${RESET}" "[Create] File: "
		read -r cmd
		[ -z "$cmd" ] && continue
		create_file_args
		touch "$cmd"
	done
}

create_directory() {
	while true; do
		visible_total=$($visible | wc -l)
		clear
		current_dir
		list_dir
		printf "\\n${YELLOW}%s${RESET}" "[Create] Directory: "
		read -r cmd
		[ -z "$cmd" ] && continue
		create_directory_args
		mkdir -p "$cmd"
	done
}

assassinate() {
	while true; do
		visible_total=$($visible | wc -l)
		clear
		current_dir
		list_dir
		printf "\\n${RED}%s${RESET}" "[Caution!] Assassinate: "
		read -r cmd
		[ -z "$cmd" ] && continue
		delete_args
		[[ "$cmd" =~ ^[0-9]+$ || "$cmd" =~ ^[-][0-9]+$ ]] && \
			[[ "$cmd" -gt $visible_total || "$cmd" -le 0 ]] && error && continue || item=$($visible| sed -n "$cmd p") && \
			trueloc="$(readlink -f "$item")" && rm -rf "$trueloc"
	done
}

# Call upon the program.
main
