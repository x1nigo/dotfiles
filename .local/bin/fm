#!/usr/bin/env bash

# fm: file manager [as simple as that].
# Created by Chris IÃ±igo <https://github.com/x1nigo/>

# Variables
sel=1
hidden=0

# Setup the terminal.
setup_terminal() {
	# Clear screen and hide cursor.
	printf '\e[?25l\e[2J\e[1;r'

	# Hide user input.
	stty -echo
}

# Reset terminal.
reset_terminal() {
	# Clear screen and show cursor.
	printf '\e[?25h\e[1J\e[1;r'

	# Show user input.
	stty echo
}

# Prints the current directory.
current_dir() {
	printf "\e[0;41;30m[%d/%d] %s${reset}\\n\\n" "$sel" "$total" "$PWD"
	# Set the window name.
	printf '\e]2;fm: %s\e'\\ "$PWD"
}

# Different colors for different files.
# colors() {
# 	trueloc=$(readlink -f "$i")
# 	file_type=$(file --mime-type -b "$trueloc")
# 	case $file_type in
# 		inode/directory)
# 			color='\e[0;34m'
# 			;;
# 		audio/*|video/*)
# 			color='\e[0;35m'
# 			;;
# 		image/*)
# 			color='\e[0;35m'
# 			;;
# 		*/pdf)
# 			color='\e[0;33m'
# 			;;
# 		*)
# 			color='\e[0m'
# 			;;
# 	esac
# 	# Color of the cursor [selected item].
# 	cursor='\e[3;40;37m'
# }

# List the contents of your current working directory.
list_dir() {
	# Color of the cursor [selected item].
	cursor='\e[3;40;37m'
 	reset='\e[0m'

	# List item order.
	order=1
	case "$hidden" in
		0)
			shopt -u dotglob
			total=$(ls | wc -l)
			;;
		1)
			shopt -s dotglob
			total=$(ls -A | wc -l)
			;;
	esac
	for i in *; do
#		colors
		[[ "$order" == "$sel" ]] && \
			printf "${cursor}%s${reset}\\n" "$i" && current="$i" ||
			printf "%s\\n" "$i"
		order=$(( $order + 1 ))
	done
	printf "\\n%s" ""
}

# These depend on the filetype.
action() {
	trueloc=$(readlink -f "$current")
	file_type=$(file --mime-type -b "$trueloc")

	case $file_type in
		inode/directory)
			cd "$current"
			;;
		audio/*|video/*)
			mpv "$current"
			;;
		image/*)
			nsxiv "$current"
			;;
		*/pdf)
			zathura "$current"
			;;
		*)
			$EDITOR "$current"
			;;
	esac
}

# This is really just the delete function.
assassinate() {
	clear
	printf "${bold}%s\\n\\t%s${reset}" "$current" "Assassinate? [y/N]: "
	read ans
	[[ "$ans" == "y" ]] && rm -rf "$current"
}

# Rename your file [can also be used to move].
rename() {
	reset_terminal
	printf "%s\\n\\t%s${reset}" "$current" "Rename: "
	read ans
	[[ -z "$ans" ]] && continue
	mv "$current" "$ans"
}

# Create a new file.
create_file() {
	reset_terminal
	printf "%s${reset}" "Create File: "
	read ans
	[[ -z "$ans" ]] && continue
	touch "$ans"
}

# Create a directory
create_dir() {
	reset_terminal
	printf "%s${reset}" "Create Directory: "
	read ans
	[[ -z "$ans" ]] && continue
	mkdir -p "$ans"
}

# Don't make an action if directory is empty.
avoid() {
	[[ "$current" != "*" ]]
}

# List of keybindings
args() {
	case "$cmd" in
		j) [[ "$sel" -lt "$total" ]] && sel=$(( $sel + 1 )) ;;
		k) [[ "$sel" -gt 1 ]] && sel=$(( $sel - 1 )) ;;
		q) reset_terminal && exit ;;
		[el]) avoid && action && sel=1 ;;
		h) cd ../ && sel=1 ;;
		H) cd && sel=1 ;;
		d) avoid && assassinate ;;
		n) create_file ;;
		m) create_dir ;;
		r) avoid && rename ;;
		g) sel=1 ;;
		G) sel="$total" ;;
		.) [[ "$hidden" == 0 ]] && hidden=1 || hidden=0 ; sel=1 ;;
	esac
}

# The main function that runs every time.
main() {
	while true; do
		setup_terminal
		list_dir
		current_dir
		read -en 1 cmd
		[ -z "$cmd" ] && continue
		args
	done
}

# Call the main function.
main
